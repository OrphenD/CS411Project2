import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    ToyLexScanner lexer;
    Parser(ToyLexScanner lexer){ this.lexer = lexer; }
:}

/* define how to connect to the scanner! */
init with {::};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */



terminal CLASS, INTERFACE, IMPLEMENTS, EXTENDS;
terminal IF, ELSE, RETURN, BREAK;
terminal INT, DOUBLE, STRING, BOOL, NEWARRAY;
terminal PRINTLN, READLN;
terminal VOID;
terminal FOR, WHILE;
terminal PLUS, MINUS, MULTI, DIVIDE, MOD;
terminal LESS, LESS_EQ, GTR, GTR_EQ, EQ, NOT_EQ;
terminal AND, OR, NOT;
terminal ASSIGN;
terminal SEMI, COMMA, PERIOD;
terminal LEFT_PAREN, RIGHT_PAREN, LEFT_BRKT, RIGHT_BRKT, LEFT_BRACE, RIGHT_BRACE;
terminal INT_CONST, DOUBLE_CONST, STRING_CONST, BOOL_CONST;
terminal ID;

/* Non terminals */
non terminal Program; 
non terminal Decl; 
non terminal VarDecl; 
non terminal Variable;
non terminal Type;
non terminal FuncDecl; 
non terminal Formals; 
non terminal ClassDecl; 
non terminal OMID; 
non terminal OMField; 
non terminal Field; 
non terminal InterDecl;
non terminal OMPrototype; 
non terminal Prototype;
non terminal StmtBlock; 
non terminal OMVarDecl; 
non terminal OMStmt; 
non terminal Stmt;
non terminal IfStmt;
non terminal WhileStmt;
non terminal ForStmt ;
non terminal BreakStmt;
non terminal ReturnStmt;
non terminal PrintStmt;
non terminal OMExpr; 
non terminal Expr; 
non terminal Lvalue; 
non terminal Call; 
non terminal Actuals; 
non terminal Constant; 

/* Precedences */
precedence nonassoc ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQ, NOT_EQ;
precedence nonassoc LESS, LESS_EQ, GTR, GTR_EQ;
precedence left PLUS, MINUS; 
precedence left MULTI, DIVIDE, MOD; 
precedence left NOT; 
precedence right LEFT_BRKT, PERIOD ;
precedence nonassoc LEFT_PAREN, RIGHT_PAREN; 

/* The grammar rules */

start with Program;
 
Program ::= Program Decl
| Decl;

Decl ::= VarDecl
| FuncDecl
| ClassDecl
| InterDecl;

VarDecl ::= Variable SEMI;
Variable ::= Type ID;

Type ::= INT 
| DOUBLE 
| BOOL
| STRING 
| Type LEFT_BRKT RIGHT_BRKT
| ID;

FuncDecl ::= Type ID LEFT_PAREN Formals RIGHT_PAREN StmtBlock 
| VOID ID LEFT_PAREN Formals RIGHT_PAREN StmtBlock 
| Type ID LEFT_PAREN RIGHT_PAREN StmtBlock 
| VOID ID LEFT_PAREN RIGHT_PAREN StmtBlock ;

Formals ::= Variable 
| Variable COMMA Formals;

ClassDecl ::=
// no extends, no implements, field +
CLASS ID LEFT_BRACE OMField RIGHT_BRACE
// 1 extends , no implements, field +
| CLASS ID EXTENDS ID LEFT_BRACE OMField RIGHT_BRACE 
// no extends, 1 implements , field +
| CLASS ID IMPLEMENTS OMID LEFT_BRACE OMField RIGHT_BRACE 
// 1 extends , no implements , field +
| CLASS ID EXTENDS ID IMPLEMENTS OMID LEFT_BRACE OMField RIGHT_BRACE 
// Without fields
| CLASS ID LEFT_BRACE RIGHT_BRACE 
| CLASS ID EXTENDS ID LEFT_BRACE RIGHT_BRACE 
| CLASS ID IMPLEMENTS OMID LEFT_BRACE RIGHT_BRACE 
| CLASS ID EXTENDS ID IMPLEMENTS OMID LEFT_BRACE RIGHT_BRACE;

OMID ::= ID 
| ID COMMA OMID ;

OMField ::= Field OMField 
| Field ;

Field ::= VarDecl 
| FuncDecl;

InterDecl ::= INTERFACE ID LEFT_BRACE OMPrototype RIGHT_BRACE
| INTERFACE ID LEFT_BRACE RIGHT_BRACE;

OMPrototype ::= Prototype OMPrototype
| Prototype ;

Prototype ::= Type ID LEFT_PAREN Formals RIGHT_PAREN SEMI 
| VOID ID LEFT_PAREN Formals RIGHT_PAREN SEMI 
	| Type ID LEFT_PAREN RIGHT_PAREN SEMI 
| VOID ID LEFT_PAREN RIGHT_PAREN SEMI;

StmtBlock ::= LEFT_BRACE OMVarDecl OMStmt RIGHT_BRACE
| LEFT_BRACE OMVarDecl RIGHT_BRACE 
| LEFT_BRACE OMStmt RIGHT_BRACE
| LEFT_BRACE RIGHT_BRACE; 

OMVarDecl ::=  OMVarDecl VarDecl 
| VarDecl ; 

OMStmt ::= OMStmt Stmt 
| Stmt ;

Stmt ::= SEMI
| Expr SEMI
| IfStmt
| WhileStmt
| ForStmt
| BreakStmt
| ReturnStmt
| PrintStmt
| StmtBlock ;

IfStmt ::= IF LEFT_PAREN Expr RIGHT_PAREN Stmt ELSE Stmt
	| IF LEFT_PAREN Expr RIGHT_PAREN Stmt; 

WhileStmt ::= WHILE LEFT_PAREN Expr RIGHT_PAREN Stmt ;


ForStmt ::= FOR LEFT_PAREN SEMI Expr SEMI RIGHT_PAREN Stmt 
| FOR LEFT_PAREN Expr SEMI Expr SEMI RIGHT_PAREN Stmt 
| FOR LEFT_PAREN SEMI Expr SEMI Expr RIGHT_PAREN Stmt 
| FOR LEFT_PAREN Expr SEMI Expr SEMI Expr RIGHT_PAREN Stmt ;


BreakStmt ::= BREAK SEMI;


ReturnStmt ::= RETURN Expr SEMI 
| RETURN SEMI;


PrintStmt ::= PRINTLN LEFT_PAREN OMExpr RIGHT_PAREN SEMI ;


OMExpr ::= Expr 
| Expr COMMA OMExpr ;

Expr ::= Lvalue ASSIGN Expr 
| Constant 
| Lvalue 
| Call 
| LEFT_PAREN Expr RIGHT_PAREN 
| Expr PLUS Expr 
| Expr MINUS Expr
| Expr MULTI Expr 
| Expr DIVIDE Expr 
| Expr MOD Expr 
| MINUS Expr 
| Expr LESS Expr
| Expr LESS_EQ Expr
| Expr GTR Expr
| Expr GTR_EQ Expr 
| Expr EQ Expr 
| Expr NOT_EQ Expr
| Expr AND Expr
| Expr OR Expr 
| NOT Expr 
| READLN LEFT_PAREN RIGHT_PAREN 
| NEWARRAY LEFT_PAREN INT_CONST COMMA Type RIGHT_PAREN ;
 
Lvalue ::= ID 
| Lvalue LEFT_BRKT Expr RIGHT_BRKT 
| Lvalue PERIOD ID ;


Call ::= ID LEFT_PAREN Actuals RIGHT_PAREN 
| ID PERIOD ID LEFT_PAREN Actuals RIGHT_PAREN 
| ID LEFT_PAREN RIGHT_PAREN 
| ID PERIOD ID LEFT_PAREN RIGHT_PAREN ;
Actuals ::= OMExpr;
Constant ::=  INT_CONST
| DOUBLE_CONST
| STRING_CONST
| BOOL_CONST ;

